---
const today = new Date();
---

<div class="cursor-dot-outline"></div>
<div class="cursor-dot"></div>
<footer class="footer footer-center block mb-5 pt-10">

<div class="w-fit mx-auto mt-5 mb-6"><div class="w-[20rem] rounded-2xl shadow-xl overflow-hidden">
            
  <div class="pb-2">
    &copy; {today.getFullYear()} LogicLooM <a href="/team" class="link link-accent">Organizers</a>
  </div>
  <div class="inline opacity-75 pb-5">
    Technicals Dept, Paradox, IIT Madras
  </div>

</div></div>
</footer>
<style></style>
<script language=JavaScript>
var message="Function Disabled!";

function clickIE4(){
if (event.button==2){
return false;
 }
}

function clickNS4(e){
if (document.layers||document.getElementById&&!document.all){
if (e.which==2||e.which==3){
return false;
}
}
}

if (document.layers){
document.captureEvents(Event.MOUSEDOWN);
document.onmousedown=clickNS4;
}
else if (document.all&&!document.getElementById){
document.onmousedown=clickIE4;
}

document.oncontextmenu=new Function("return false")
</script>
<script>
let backtotop = select('.back-to-top')
  if (backtotop) {
    const toggleBacktotop = () => {
      if (window.scrollY > 100) {
        backtotop.classList.add('active')
      } else {
        backtotop.classList.remove('active')
      }
    }
    window.addEventListener('load', toggleBacktotop)
    onscroll(document, toggleBacktotop)
  }
</script>
<script>
var cursor = {
    delay: 8,
    _x: 0,
    _y: 0,
    endX: (window.innerWidth / 2),
    endY: (window.innerHeight / 2),
    cursorVisible: true,
    cursorEnlarged: false,
    $dot: document.querySelector('.cursor-dot'),
    $outline: document.querySelector('.cursor-dot-outline'),
    init: function() {
        // Set up element sizes
        this.dotSize = this.$dot.offsetWidth;
        this.outlineSize = this.$outline.offsetWidth;
        
        this.setupEventListeners();
        this.animateDotOutline();
    },
//     updateCursor: function(e) {
//         var self = this;    
//         console.log(e)    
//         // Show the cursor
//         self.cursorVisible = true;
//         self.toggleCursorVisibility();
//         // Position the dot
//         self.endX = e.pageX;
//         self.endY = e.pageY;
//         self.$dot.style.top = self.endY + 'px';
//         self.$dot.style.left = self.endX + 'px';
//     },
    setupEventListeners: function() {
        var self = this; 
        // Anchor hovering
        document.querySelectorAll('a').forEach(function(el) {
            el.addEventListener('mouseover', function() {
                self.cursorEnlarged = true;
                self.toggleCursorSize();
            });
            el.addEventListener('mouseout', function() {
                self.cursorEnlarged = false;
                self.toggleCursorSize();
            });
        });   
        // Click events
        document.addEventListener('mousedown', function() {
            self.cursorEnlarged = true;
            self.toggleCursorSize();
        });
        document.addEventListener('mouseup', function() {
            self.cursorEnlarged = false;
            self.toggleCursorSize();
        });
        document.addEventListener('mousemove', function(e) {
            // Show the cursor
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            // Position the dot
            self.endX = e.pageX;
            self.endY = e.pageY;
            self.$dot.style.top = self.endY + 'px';
            self.$dot.style.left = self.endX + 'px';
        });
        // Hide/show cursor
        document.addEventListener('mouseenter', function(e) {
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            self.$dot.style.opacity = 1;
            self.$outline.style.opacity = 1;
        });  
        document.addEventListener('mouseleave', function(e) {
            self.cursorVisible = true;
            self.toggleCursorVisibility();
            self.$dot.style.opacity = 0;
            self.$outline.style.opacity = 0;
        });
    },
    animateDotOutline: function() {
        var self = this;  
        self._x += (self.endX - self._x) / self.delay;
        self._y += (self.endY - self._y) / self.delay;
        self.$outline.style.top = self._y + 'px';
        self.$outline.style.left = self._x + 'px';
        
        requestAnimationFrame(this.animateDotOutline.bind(self));
    },
    toggleCursorSize: function() {
        var self = this;
        
        if (self.cursorEnlarged) {
            self.$dot.style.transform = 'translate(-50%, -50%) scale(0.75)';
            self.$outline.style.transform = 'translate(-50%, -50%) scale(1.5)';
        } else {
            self.$dot.style.transform = 'translate(-50%, -50%) scale(1)';
            self.$outline.style.transform = 'translate(-50%, -50%) scale(1)';
        }
    },
    toggleCursorVisibility: function() {
        var self = this;
        
        if (self.cursorVisible) {
            self.$dot.style.opacity = 1;
            self.$outline.style.opacity = 1;
        } else {
            self.$dot.style.opacity = 0;
            self.$outline.style.opacity = 0;
        }
    }
}
cursor.init();
</script>
<script>
  const images = [
    {
      src: "/textlogo_new.png",
      width: 1920,
      height: 1080
    },
    {
      src: "/textlogo_dark.PNG",
      width: 858,
      height: 507
    }
  ];
  const imageElement = document.getElementById("imageSwitcher");
  let currentIndex = 0;
  function switchImage() {
    currentIndex = (currentIndex + 1) % images.length;
    const newImage = images[currentIndex];
    imageElement.src = newImage.src;
    imageElement.width = newImage.width;
    imageElement.height = newImage.height;
  }

  setInterval(switchImage, 10000);
</script>
<script>
  const phrases = [
    "LogicLooM ðŸš€",
    "IITM Paradox"
  ];
      
  let index = 0;
  let charIndex = 0;
  const typingSpeed = 100;
  const pauseDuration = 2000;
  const titleElement = document.getElementById('typing-title');
  function type() {
    if (charIndex < phrases[index].length) {
      titleElement.textContent += phrases[index].charAt(charIndex);
      charIndex++;
      setTimeout(type, typingSpeed);
    } else {
      setTimeout(deleteText, pauseDuration);
    }
  }
  function deleteText() {
    if (charIndex > 0) {
      titleElement.textContent = phrases[index].substring(0, charIndex - 1);
      charIndex--;
      setTimeout(deleteText, typingSpeed);
    } else {
      index = (index + 1) % phrases.length;
      titleElement.textContent = '';
      charIndex = 0; // Reset char index
      setTimeout(type, typingSpeed + 500);
    }
  }
  type();
</script>
